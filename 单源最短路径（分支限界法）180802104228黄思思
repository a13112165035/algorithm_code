#include<iostream>
usingname std;
#define MAX 32767


template<class Type>
class Graph{
	friend void main(void);
public:
	void ShortestPaths(int);
private:
	int n,       //图G的顶点数 
	    *prev;   //前驱顶点数组 
	    Type**c; //图G的邻接矩阵 
	    *dist;   //最短距离数组 
};


template<class Type>
class MinHeapNode{
	friend Graph<Type>;
public:
	operator int() const{return length;}
private:
	int i;      //顶点编号 
	Type length;//当前路长 
  MinHeapNode *node;
};


Graph::Graph()
{
	int wi = 0; 
	int yi = 0;
	cout<<"请输入图的节点个数：";
	cin>>n;
	cout<<"请输入图的邻接矩阵:" << endl;
	c = new int*[n+1];
	dist = new int[n+1];
	prev = new int[n+1];
	for (wi = 0; wi <= n; wi++)
	{
		c[wi] = new int[n+1];	
		if (wi == 0)
		{
			for (yi = 0; yi <= n; yi++)
			{	c[wi][yi] = 0;	}
		}
		else
		{
			for (yi = 0; yi <= n; yi++)
			{
				if (yi == 0)
				{c[wi][yi] = 0;}
				else
				{
			    	cin >> c[wi][yi];
				}
			}
		}
	}
	for (wi = 0; wi <= n; wi++)
	{
		dist[wi] = MAX;
		prev[wi] = 0;
	}
}


template<class Type>
void Graph<Type>::ShortestPaths(int v){     //单源最短路径问题的优先队列式分支限界法 
  MinHeap<MinHeapNode<Type>> H(1000) ;      //定义最小的堆容量1000 
  MinHeapNode<Type> E;                      //定义源为初始拓展结点 
  E.i=v;
  E.length=0;
  dist[v]=0;
  while(true){                              //搜索问题的解空间 
  	for(int j=1;j<=n;j++){
  		if((c[E.i][j]<inf)&&(E.length)+c[E.i][j]<dist[j])){ //顶点i到顶点j可达，且满足控制约束 
  			dis[j]=E.length+c[E.i][j];
  			pre[j]=E.i;
  			MinHeapNode<Type> N;           //加入活结点优先队列 
  			N.i=j;
  			N.length=dist[j];
			H.Insert(N); 
		}
	    else{
	    	H.DeleteMin(E);
		}
	    if(OutOfBounds()){break;    //优先队列空 
		}
		cout<<"上一个扩展节点"<<E.i<<" "<<E.length<<endl;
		H.DeleteMin(E);
		cout<<"下一个扩展节点"<<E.i<<" "<<E.length<<endl;
		  }
	  }
  } 
  
bool MinHeap::OutOfBounds()
{
	int i = 0;
	bool flag = true;
	for (i = 1; i <= length; i++)
	{
		if (node[i].getI() != 0)
		{
			flag = false;
		}
	}
	return flag;
}

void Graph::ShowDist()
{
	cout << "从源点到该节点的最短路径:" << endl;
	int i = 0;
	int temp = 0;
	for (i = 1; i <= n; i++)
	{
		cout << "dist[" << i << "] = " << dist[i] << endl;
	}
	cout << "从源点到终点的最短路径长度为:" << dist[n] << endl;
	cout << "其路径为：";
	temp = n;
	while(temp != 0)
	{
		if (prev[temp] == 0)
		{
			cout << temp;
		}
		else
		{
			cout << temp << "->";
		}
		temp = prev[temp];
	}
	cout << endl;
}


  int main()
  {
  	Graph G;
  	G.ShorestPaths(1);
	  G.ShowDist();
	  return 0;
  	
  }
