#include<iostream>
using namespace std; 
#define maxint 65535
int c[6][6]= {{0,0,0,0,0,0},
	          {0,0,10,65535,30,100},
              {0,65535,0,50,65535,65535},
              {0,65535,65535,0,65535,10},
              {0,65535,65535,20,0,60},
              {0,65535,65535,65535,65535,0}};

void Dijkstra(int n,int v,int dist[],int prev[]) {
	bool s[maxint];
	for(int i=1;i<=n;i++){
		dist[i]=c[v][i];
		s[i]=false;
		if(dist[i]==maxint)
		prev[i]=0;
		else
		prev[i]=v;
	}
	dist[v]=0;s[v]=true;
	for(int i=1;i<n;i++){
		int temp=maxint;
		int u=v;
		for(int j=1;j<=n;j++)
		if((!s[j])&&(dist[j]<temp)){
			u=j;
			temp=dist[j];
		} 
		s[u]=true;
		for(int j=1;j<=n;j++){
			if((!s[j])&&(c[u][j]<maxint)){
				int newdish=dist[u]+c[u][j];
				if(newdish<dist[j]){
					dist[j]=newdish;
					prev[j]=u;
				}
			}
		}
	
	}
	
}
void Traceback(int v,int i,int prev[])
{
	if(v==i)
	{   cout<<i;
		return;
	}
	Traceback(v,prev[i],prev);
	cout<<"->"<<i;
}

int main(){
	int n=5;
	int v=1;
	int dist[5];
	int prev[5];
	cout<<"有向图矩阵为:"<<endl;
	Dijkstra(5,1,dist,prev);
	for(int i=1;i<6;i++) {
		for(int j=1;j<6;j++)
		cout<<"\t"<<c[i][j];
		cout<<endl;
	}
    for(int i=1; i<=n; i++)
	{
		cout<<"源点到"<<i<<"的最短路径长度为:"<<dist[i]<<"，其路径为";
		Traceback(1,i,prev);
		cout<<endl;
	}
	return 0;
	}
	
	
